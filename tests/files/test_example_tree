(A + C) + C => A
C => A
B + (C | A) => G
A + C => B | G

##Affirmation upward can be convert to A + C + ! B => G
##A + C + ! G => B with set of B and G to unknow if both False at first read of the affirmation

=C
?B

#C is True
####################-TREE B-#################
#                                           #
#                     Node B                #
#                        |                  #
#                    node =>                #
#                        |                  #
#            node + -----|------ node C     #
#            ____|____                      #
#            |        |                     #
#        node A     node C                  #
#            |                              #
#        node =>                            #
#            |                              #
#        node C                             #
#                                           #
#############################################



####################-TREE A-#################
#                                           #
#                     Node A                #
#                        |                  #
#                    node =>                #
#                        |                  #
#                      node C               #
#############################################

####################-TREE G-#################
#                   Node G                  #
#                       |                   #
#                   node =>                 #
#                       |                   #
#                   node +                  #
#                       |                   #
#       node B -------|------- node '|'     #
#           |               ____|____       #
#           |               |        |      #
#       (TREE B)          node C    node A  #
#                                           #
#############################################


#B and G is set to unknow

#new tree B :
                    #                             node C
                     #                              |
####################-TREE B-#################    node+ ---- node A
#                                                  |
#                     Node B --------------------node+ ---- !node G
#                        |
#                    node =>
#                        |
#            node + -----|------ node C
#            ____|____
#            |        |
#        node A     node C
#            |
#        node =>
#            |
#        node C
#
#############################################

#new tree G :
####################-TREE G-#################
#                                                node C
#                                                  |
#                                                node+ ---- node A
#                                                  |
#                   Node G--------------------node+ ---- !node B
#                       |                   #
#                   node =>                 #
#                       |                   #
#                   node +                  #
#                       |                   #
#       node B -------|------- node '|'     #
#           |               ____|____       #
#           |               |        |      #
#       (TREE B)          node C    node A  #
#                                           #
#############################################



#Resolving :

#?B =

#B is unknow

#C + A + !G ou C + (C | A) == True and True and !unknow ou True and (True | True)
#True and True and !unknow = unknow
#True and (True | True) == True and True == True

#+
#A + B => C + D
     # =
#A + B => C
#A + B => D

#|
#A + B => C | D
     # =
#A + B + ! C => D
#A + B + ! D => C
#If one is false, set to unknow

#^
#A + B => C ^ D
    #  =
#A + B + ! C => D
#A + B + ! D => C
#If no one is true, set to unknow


#| with !
#A + B => C | !D
     # =
#A + B + D => C
#If one is false, set to unknow

#^ with !
#A + B => C ^ !D
    #  =
#A + B + D => C
#If no one is true, set to unknow


          ### A + B => C | D ###

#              node C      node D
#                    \   /
#                     \ /
#                node '|'                  
#                      |                   
#                  node =>                 
#                      |                   
#                   node +                  
#                     / \
#                    /   \
#               node A    node B           

          ### A + B => C | D | E ###
#
#           node C  node D
#               \   /
#                \ /
#                node '?'   node E
#                    \   /
#                     \ /
#                node '?'                  
#                      |                   
#                  node =>                 
#                      |                   
#                   node ?                  
#                     / \
#                    /   \
#               node A    node B  